[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Functions",
    "section": "",
    "text": "The first input to the functions is a dataset so the functions can be chained together in a sequence. The inputs to the functions are based on the toggles on the app."
  },
  {
    "objectID": "index.html#course-handicap",
    "href": "index.html#course-handicap",
    "title": "Functions",
    "section": "Course Handicap",
    "text": "Course Handicap\nThe function course_handicap outputs all CH variables including the adjusted CH for both maximum par (chah) and minimum par (chal). Rounding is applied based on inputs round=TRUE (Round CH toggle) or rmatch=TRUE (Round matchplay CH toggle).\nThe functions round0 and round1 rounds the input to 0 or 1 decimal place.\n\n\nShow code for function: course_handicap\ncourse_handicap &lt;- function(data, \n                            index_var = \"hi\", \n                            holes = 18, \n                            round = TRUE, \n                            crp = FALSE,\n                            hi_round = FALSE,\n                            rmatch = FALSE) {\n\n  data |&gt;\n    mutate(\n      index := !!rlang::sym(index_var),\n      index = round1(index),\n      player = row_number(),\n      crp = ifelse(holes == 9, TRUE, crp),\n      minpar = min(par, na.rm=TRUE),\n      maxpar = max(par, na.rm=TRUE),\n      mincr = min(cr, na.rm=TRUE),\n      maxcr = max(cr, na.rm=TRUE)\n    ) |&gt;\n    rowwise() |&gt;\n    mutate(\n      ch1 = case_when(\n        holes == 18 & crp == FALSE ~ index * sr / 113,\n        holes == 18 & crp == TRUE ~ index * sr / 113 + cr - par,\n        holes == 9 & hi_round == FALSE ~ (index / 2) * sr / 113 + cr - par,\n        holes == 9 & hi_round == TRUE ~ round1(index / 2) * sr / 113 + cr - par\n      )\n    ) |&gt;\n    mutate(\n      ch1a = ch1 + par - minpar,\n      ch1b = ch1 + par - maxpar,\n      ch = ifelse(round == TRUE | rmatch == TRUE, round0(ch1), ch1),\n      chah = ifelse(round == TRUE | rmatch == TRUE, round0(ch1b), ch1b),\n      chal = ifelse(round == TRUE | rmatch == TRUE, round0(ch1a), ch1a)\n      )\n}\n\n\nCreate test dataset with handicap index and rating variables for 4 players\n\nmixed &lt;- tibble(\n  hi = c(9.3, 25.8, -1.2, 2.3),\n  sr = c(125, 118, 129, 129),\n  cr = c(71.1, 69.4, 72.0, 72.0),\n  par = c(70, 69, 72, 72)\n)\n\nExample 1: Use course_handicap function to add all the CH variables including adjusted CH for both highest par (chah) and lowest par (chal) to the dataset. The relevant variables will be used for subsequent calculations.\n\nmixed |&gt;\n  course_handicap(round = FALSE, crp = TRUE) |&gt; \n  select(hi, sr, cr, par, crp, ch1, ch, chah, chal) |&gt; \n  gt()\n\n\n\n\n\n  \n    \n      hi\n      sr\n      cr\n      par\n      crp\n      ch1\n      ch\n      chah\n      chal\n    \n  \n  \n    9.3\n125\n71.1\n70\nTRUE\n11.387611\n11.387611\n9.387611\n12.387611\n    25.8\n118\n69.4\n69\nTRUE\n27.341593\n27.341593\n24.341593\n27.341593\n    -1.2\n129\n72.0\n72\nTRUE\n-1.369912\n-1.369912\n-1.369912\n1.630088\n    2.3\n129\n72.0\n72\nTRUE\n2.625664\n2.625664\n2.625664\n5.625664"
  },
  {
    "objectID": "index.html#playing-handicap",
    "href": "index.html#playing-handicap",
    "title": "Functions",
    "section": "Playing Handicap",
    "text": "Playing Handicap\nThe function playing_handicap takes the output dataset from the course_handicap function and applies the allowances (the function add_format provides the required allowance for the selected format ). This function also calculates all the individual mixed tee adjustments using the crp input (CR-Par toggle) for both medal and stableford scoring formats.\n\n\nShow code for function: playing_handicap\nplaying_handicap &lt;- function(data, \n                             allowance = 100, \n                             holes = 18, \n                             crp = FALSE) {\n  data |&gt;\n    ungroup() |&gt;\n    mutate(ph = ch * allowance / 100) |&gt;\n    mutate(\n      pts = case_when(\n        holes == 18 & crp == FALSE ~ 36 - round0(cr - par),\n        holes == 18 & crp == TRUE ~ 36,\n        holes == 9 ~ 18\n      ),\n      stb = max(pts, na.rm = TRUE) - pts,\n      medal = case_when(\n        holes == 18 & crp == FALSE ~ cr - mincr,\n        holes == 9 | crp == TRUE ~ par - minpar\n      ),\n       # note: common par and stb1 for use in foursomes/greensomes when crp=TRUE (existing calculation)\n      commonpar = min(par, na.rm = TRUE),\n      pts1 = 36 - round0(cr - commonpar),\n      stb1 = max(pts1, na.rm = TRUE) - pts1,\n      \n      phm = round0(ph + medal),\n      phs = round0(ph + stb),\n      ph1 = ph,\n      ph = round0(ph)\n    ) |&gt;\n    filter(!is.na(ch))\n}"
  },
  {
    "objectID": "index.html#foursomesgreensomes",
    "href": "index.html#foursomesgreensomes",
    "title": "Functions",
    "section": "Foursomes/Greensomes",
    "text": "Foursomes/Greensomes\nThe function alternate_shot takes the output from the playing-handicap function and calculates the team handicaps using either the actual or adjusted CH (if 2024setting toggle = ON). The input score is for using either the highest or the lowest par to adjust the CH. On the app, weâ€™d always use the highest/maximum par so default score=high. The function also calculates the combined CH (sumch) and difference in combined CH (dsumch) for use in the foursomes matchplay format only when 2024setting toggle = ON. Additional rounding to CH is applied based on the input rmatch (Round Matchplay CH toggle).\n\n\nShow code for function: alternate_shot\nalternate_shot &lt;- function(data,\n                           holes = 18,\n                           crp = FALSE,\n                           type = \"greensomes\",\n                           adj_ch = FALSE,\n                           score = \"high\",\n                           rmatch = FALSE) {\n\n  weights &lt;- tibble(\n    type = rep(c(\"greensomes\", \"foursomes\"), each = 2),\n    rank = c(1, 2, 1, 2),\n    weights = c(0.60, 0.4, 0.5, 0.5)\n  )\n\n  data |&gt;\n    ungroup() |&gt;\n    mutate(\n      type = type,\n      type = ifelse(str_detect(format, \"Foursomes\") == TRUE, \"foursomes\", \"greensomes\"),\n      row_n = row_number(),\n      group = ceiling(row_n / 2),\n      mgroup = ceiling(row_n / 4)\n    ) |&gt;\n    rowwise() |&gt;\n    mutate(\n      cha1 = ifelse(score == \"high\", chah, chal),\n      cha1 = ifelse(rmatch == TRUE & str_detect(format, \"matchplay\") == TRUE, round0(cha1), cha1),\n      ch = ifelse(rmatch == TRUE & str_detect(format, \"matchplay\") == TRUE, round0(ch), ch)\n      ) |&gt;\n    group_by(group) |&gt;\n    mutate(\n      gsize = length(ch),\n      rank = ifelse(gsize == 2, rank(ifelse(adj_ch == TRUE & crp == TRUE, cha1, ch), ties.method = \"random\"), NA)\n    ) |&gt;\n    left_join(weights, by = c(\"type\", \"rank\")) |&gt;\n    mutate(\n      th = ifelse(adj_ch == TRUE & crp == TRUE, sum(cha1 * weights), sum(ch * weights)),\n      adj_m = ifelse(adj_ch == TRUE  & crp == TRUE, 0, sum(medal / 2)),\n      adj_s = ifelse(adj_ch == TRUE & crp == TRUE, 0, ifelse(holes == 9 | crp == TRUE, adj_m, sum(stb1 / 2))\n      ),\n      thm = ifelse(row_n / group == gsize, round0(th + adj_m), NA),\n      ths = ifelse(row_n / group == gsize, round0(th + adj_s), NA),\n      sumch1 = ifelse(str_detect(format, \"Foursomes\") == TRUE, 2*th, NA),\n      sumch = ifelse(str_detect(format, \"Foursomes\") == TRUE, round0(2*(th+adj_m)), NA),\n    ) |&gt;\n    group_by(mgroup) |&gt;\n    mutate(\n      s = ifelse(!is.na(thm), thm - min(thm, na.rm = TRUE), NA),\n      dsumch = ifelse(!is.na(sumch), sumch - min(sumch, na.rm = TRUE), NA),\n      s1 = ifelse(!is.na(sumch) & !is.na(s), round0(0.5*(sumch - min(sumch, na.rm = TRUE))), NA)\n      ) |&gt;\n    ungroup() |&gt;\n    select(-rank, -gsize, -mgroup)\n}\n\n\nApply the alternate_shot function for Foursomes format\n\nmixed |&gt;\n  add_format(format = \"Foursomes (50/50%)\") |&gt; \n  course_handicap(round = FALSE, crp = TRUE) |&gt;\n  playing_handicap() |&gt;\n  alternate_shot(adj_ch=TRUE) |&gt; \n  select(hi,par, ch, chah, th,  adj_m, thm, adj_s, ths) |&gt; \n  gt() |&gt; \n  sub_missing(missing_text = \"\")\n\n\n\n\n\n  \n    \n      hi\n      par\n      ch\n      chah\n      th\n      adj_m\n      thm\n      adj_s\n      ths\n    \n  \n  \n    9.3\n70\n11.387611\n9.387611\n16.8646018\n0\n\n0\n\n    25.8\n69\n27.341593\n24.341593\n16.8646018\n0\n17\n0\n17\n    -1.2\n72\n-1.369912\n-1.369912\n0.6278761\n0\n\n0\n\n    2.3\n72\n2.625664\n2.625664\n0.6278761\n0\n1\n0\n1\n  \n  \n  \n\n\n\n\nApply the alternate_shot function for Foursomes matchplay format\n\nmixed |&gt;\n  add_format(format = \"Foursomes (50/50%) matchplay\") |&gt;\n  course_handicap(round = FALSE, crp = TRUE) |&gt;\n  playing_handicap() |&gt;\n  alternate_shot(adj_ch=TRUE) |&gt; \n  select(hi,par, ch, chah, th, thm, s, sumch1, sumch, dsumch, s1) |&gt; \n  gt() |&gt; \n  sub_missing(missing_text = \"\")\n\n\n\n\n\n  \n    \n      hi\n      par\n      ch\n      chah\n      th\n      thm\n      s\n      sumch1\n      sumch\n      dsumch\n      s1\n    \n  \n  \n    9.3\n70\n11.387611\n9.387611\n16.8646018\n\n\n33.729204\n34\n33\n\n    25.8\n69\n27.341593\n24.341593\n16.8646018\n17\n16\n33.729204\n34\n33\n17\n    -1.2\n72\n-1.369912\n-1.369912\n0.6278761\n\n\n1.255752\n1\n0\n\n    2.3\n72\n2.625664\n2.625664\n0.6278761\n1\n0\n1.255752\n1\n0\n0"
  },
  {
    "objectID": "index.html#bbb-matchplay",
    "href": "index.html#bbb-matchplay",
    "title": "Functions",
    "section": "4BBB Matchplay",
    "text": "4BBB Matchplay\nThe function matchplay takes the output from the course_handicap function. The playing_handicap function within the function is used to get phm and calculate s.\nIt uses the input diff90 (=TRUE if 2024setting toggle = ON) to apply 100% allowance to the CH and 90% allowance to the S. Otherwise it defaults to the current format 90% allowance and s = full difference to the lowest phm.\n\n\nShow code for function: matchplay\nmatchplay &lt;- function(data, \n                      n = 2, \n                      holes = 18, \n                      crp = FALSE, \n                      diff90=FALSE) {\n  data |&gt;\n    mutate(allowance = ifelse(n == 4 & diff90 == FALSE, 90, 100)) |&gt; \n    playing_handicap(\n      allowance = allowance,\n      holes = holes,\n      crp = crp\n    ) |&gt;\n    ungroup() |&gt;\n    mutate(\n      row_n = row_number(),\n      group = ceiling(row_n / n)\n    ) |&gt;\n    group_by(group) |&gt;\n    mutate(s = phm - min(phm, na.rm = TRUE)) |&gt;\n    ungroup() |&gt;\n    rowwise() |&gt;\n    mutate(s = ifelse(diff90 == TRUE, round0(s*0.9), s))\n}\n\n\nExample 2: Use the matchplay function for 4BBB matchplay format when 2024settings = OFF.\n\nmixed |&gt; \n  add_format(format = \"4BBB matchplay (90%)\") |&gt;\n  course_handicap(round = FALSE, crp = TRUE) |&gt;\n  matchplay(n = 4, diff90 =  FALSE) |&gt; \n  select(hi, sr, cr, par, ch, medal, phm, s) |&gt; \n  gt()\n\n\n\n\n\n  \n    \n      hi\n      sr\n      cr\n      par\n      ch\n      medal\n      phm\n      s\n    \n  \n  \n    9.3\n125\n71.1\n70\n11.387611\n1\n11\n9\n    25.8\n118\n69.4\n69\n27.341593\n0\n25\n23\n    -1.2\n129\n72.0\n72\n-1.369912\n3\n2\n0\n    2.3\n129\n72.0\n72\n2.625664\n3\n5\n3\n  \n  \n  \n\n\n\n\n\n Note: this is the existing calculation with crp = ON, where phm = 90% ch + medal adjustment.\n\nExample 3: Use the matchplay function for 4BBB matchplay format. The input diff90 = TRUE when 2024settings = ON.\n\nmixed |&gt; \n  add_format(format = \"4BBB matchplay (90%)\") |&gt;\n  course_handicap(round = FALSE, crp = TRUE, rmatch = TRUE) |&gt;\n  matchplay(n = 4, diff90 = TRUE) |&gt; \n  select(hi, sr, cr, par, ch, ph, medal, phm, s) |&gt; \n  gt()\n\n\n\n\n\n  \n    \n      hi\n      sr\n      cr\n      par\n      ch\n      ph\n      medal\n      phm\n      s\n    \n  \n  \n    9.3\n125\n71.1\n70\n11\n11\n1\n12\n9\n    25.8\n118\n69.4\n69\n27\n27\n0\n27\n23\n    -1.2\n129\n72.0\n72\n-1\n-1\n3\n2\n0\n    2.3\n129\n72.0\n72\n3\n3\n3\n6\n4\n  \n  \n  \n\n\n\n\n\n Notes: this is the new format â€˜4BBB matchplay (90% difference)â€™. It is only relevant when 2024settings = ON where ph = 100%ch and s is 90% of the difference to the lowest phm.\nResults are shown only when user selects the â€˜4BBB matchplay (90%)â€™ & 2024settings = ON.\nThe rmatch = TRUE here overrides the round = FALSE and rounds the CH."
  },
  {
    "objectID": "index.html#scramble",
    "href": "index.html#scramble",
    "title": "Functions",
    "section": "Scramble",
    "text": "Scramble\nThe function scramble takes the output from the course_handicap function applies the playing_handicap function. It uses either the actual CH or the adjusted CH (if 2024setting = ON) for the calculations. The input score is for using the highest or the lowest par to adjust the CH. On the app, we use only the highest/maximum par so the default input is fixed at score=high. The input dp applies the rounding at the end (Round scramble TH toggle on the app, with ON = 0dp, OFF = 1dp)\n\n\nShow code for function: scramble\nscramble &lt;- function(data,\n                     n = 2,\n                     holes = 18,\n                     crp = FALSE,\n                     adj_ch=FALSE,\n                     score=\"high\",\n                     dp = 0) {\n\n  weights &lt;- tibble(\n    size = c(2, 2, 3, 3, 3, 4, 4, 4, 4),\n    rank = c(1, 2, 1, 2, 3, 1, 2, 3, 4),\n    weights = c(0.35, 0.15, 0.30, 0.2, 0.1, 0.25, 0.2, 0.15, 0.1)\n  )\n\n  data |&gt;\n    ungroup() |&gt;\n    mutate(\n      tees = ifelse(length(unique(cr)) &gt; 1, \"mixed\", \"single\"),\n      across(c(cr, par), ~ ifelse(tees == \"mixed\" & n == 3 &\n                                    nrow(data) == 4 & player == 4, NA, .)),\n      across(c(cr, par), ~ ifelse(tees == \"mixed\" & n == 2 &\n                                    nrow(data) == 3 & player == 3, NA, .))\n           ) |&gt;\n    playing_handicap(holes = holes, crp = crp) |&gt;\n    ungroup() |&gt;\n    mutate(\n      group = ceiling(row_number() / n)\n    ) |&gt;\n    rowwise() |&gt;\n    mutate(cha1 = ifelse(score == \"high\", chah, chal)) |&gt;\n    group_by(group) |&gt;\n    mutate(\n      row_n = row_number(),\n      size = length(ch),\n      rank = rank(ifelse(adj_ch == TRUE & crp == TRUE, cha1, ch), ties.method = \"random\")\n\n    ) |&gt;\n    left_join(weights, by = c(\"size\", \"rank\")) |&gt;\n    mutate(weights = ifelse(size &lt; n, NA, weights)) |&gt; \n    # show values only against the last player on a team\n    mutate(\n      adj = ifelse(row_n == size & !is.na(weights), \n                   ifelse(adj_ch == TRUE & crp == TRUE, 0, sum(medal / size)), NA),\n      th = ifelse(row_n == size, ifelse(adj_ch == TRUE & crp == TRUE, sum(cha1 * weights),\n                                        sum(ch * weights)), NA),\n      thm = ifelse(row_n == size, ifelse(adj_ch == TRUE & crp == TRUE, sum(cha1 * weights),\n                                         sum(ch * weights) + adj), NA)\n    ) |&gt; \n    mutate(\n      thm = case_when(row_n == size & dp == 1 ~ round1(thm),\n                     row_n == size & dp == 0 ~ round0(thm),\n                     TRUE ~ NA)\n    ) |&gt;\n    ungroup() |&gt;\n    filter(!is.na(ch)) |&gt;\n    select(-rank, -size, -row_n) \n    \n}\n\n\nExample 8: Apply the scramble function\n\nmixed |&gt;\n  add_format(format = \"4P scramble (25/20/15/10%)\") |&gt;\n  course_handicap(round = FALSE, crp = TRUE) |&gt;\n  scramble(n = 4, adj_ch = TRUE, dp = 0) |&gt; \n  select(hi, sr, cr, par, ch, chah, th, adj, thm) |&gt; \n  gt() |&gt; \n  sub_missing(missing_text = \"\")\n\n\n\n\n\n  \n    \n      hi\n      sr\n      cr\n      par\n      ch\n      chah\n      th\n      adj\n      thm\n    \n  \n  \n    9.3\n125\n71.1\n70\n11.387611\n9.387611\n\n\n\n    25.8\n118\n69.4\n69\n27.341593\n24.341593\n\n\n\n    -1.2\n129\n72.0\n72\n-1.369912\n-1.369912\n\n\n\n    2.3\n129\n72.0\n72\n2.625664\n2.625664\n4.024956\n0\n4\n  \n  \n  \n\n\n\n\nExample 9: Apply the scramble function to 3 player teams with dp = 1\n\nmixed |&gt;\n  add_format(format = \"3P scramble (30/20/10%)\") %&gt;%\n  course_handicap(round = FALSE, crp = TRUE) |&gt;\n  scramble(n = 3, adj_ch = TRUE, dp = 1) |&gt; \n  select(hi, sr, cr, par, ch, chah, th, adj, thm) |&gt; \n  gt() |&gt; \n  sub_missing(missing_text = \"\")\n\n\n\n\n\n  \n    \n      hi\n      sr\n      cr\n      par\n      ch\n      chah\n      th\n      adj\n      thm\n    \n  \n  \n    9.3\n125\n71.1\n70\n11.387611\n9.387611\n\n\n\n    25.8\n118\n69.4\n69\n27.341593\n24.341593\n\n\n\n    -1.2\n129\n72.0\n72\n-1.369912\n-1.369912\n3.900708\n0\n3.9\n    2.3\n129\n\n\n2.625664\n2.625664"
  },
  {
    "objectID": "index.html#foursomes-greensomes",
    "href": "index.html#foursomes-greensomes",
    "title": "Functions",
    "section": "Foursomes & Greensomes",
    "text": "Foursomes & Greensomes\nThe function alternate_shot takes the output from the playing_handicap function and calculates the team handicaps using either the actual or adjusted CH (if 2024setting toggle = ON).\nThe input score is for using either the highest or the lowest par to adjust the CH. On the app, weâ€™d always use the highest/maximum par so default score=high.\n\nThe function also calculates the combined CH (sumch) and difference in combined CH (dsumch) for use in ONLY the foursomes matchplay format when 2024setting toggle = ON.\nAdditional rounding to CH is applied based on the input rmatch (Round Matchplay CH toggle).\n\n\nShow code for function: alternate_shot\nalternate_shot &lt;- function(data,\n                           holes = 18,\n                           crp = FALSE,\n                           type = \"greensomes\",\n                           adj_ch = FALSE,\n                           score = \"high\",\n                           rmatch = FALSE) {\n\n  weights &lt;- tibble(\n    type = rep(c(\"greensomes\", \"foursomes\"), each = 2),\n    rank = c(1, 2, 1, 2),\n    weights = c(0.60, 0.4, 0.5, 0.5)\n  )\n\n  data |&gt;\n    ungroup() |&gt;\n    mutate(\n      type = type,\n      type = ifelse(str_detect(format, \"Foursomes\") == TRUE, \"foursomes\", \"greensomes\"),\n      row_n = row_number(),\n      group = ceiling(row_n / 2),\n      mgroup = ceiling(row_n / 4)\n    ) |&gt;\n    rowwise() |&gt;\n    mutate(\n      cha1 = ifelse(score == \"high\", chah, chal),\n      cha1 = ifelse(rmatch == TRUE & str_detect(format, \"matchplay\") == TRUE, round0(cha1), cha1),\n      ch = ifelse(rmatch == TRUE & str_detect(format, \"matchplay\") == TRUE, round0(ch), ch)\n      ) |&gt;\n    group_by(group) |&gt;\n    mutate(\n      gsize = length(ch),\n      rank = ifelse(gsize == 2, rank(ifelse(adj_ch == TRUE & crp == TRUE, cha1, ch), ties.method = \"random\"), NA)\n    ) |&gt;\n    left_join(weights, by = c(\"type\", \"rank\")) |&gt;\n    mutate(\n      th = ifelse(adj_ch == TRUE & crp == TRUE, sum(cha1 * weights), sum(ch * weights)),\n      adj_m = ifelse(adj_ch == TRUE  & crp == TRUE, 0, sum(medal / 2)),\n      adj_s = ifelse(adj_ch == TRUE & crp == TRUE, 0, ifelse(holes == 9 | crp == TRUE, adj_m, sum(stb1 / 2))\n      ),\n      thm = ifelse(row_n / group == gsize, round0(th + adj_m), NA),\n      ths = ifelse(row_n / group == gsize, round0(th + adj_s), NA),\n      sumch1 = ifelse(str_detect(format, \"Foursomes\") == TRUE, 2*th, NA),\n      sumch = ifelse(str_detect(format, \"Foursomes\") == TRUE, round0(2*(th+adj_m)), NA),\n    ) |&gt;\n    group_by(mgroup) |&gt;\n    mutate(\n      s = ifelse(!is.na(thm), thm - min(thm, na.rm = TRUE), NA),\n      dsumch = ifelse(!is.na(sumch), sumch - min(sumch, na.rm = TRUE), NA),\n      s1 = ifelse(!is.na(sumch) & !is.na(s), round0(0.5*(sumch - min(sumch, na.rm = TRUE))), NA)\n      ) |&gt;\n    ungroup() |&gt;\n    select(-rank, -gsize, -mgroup)\n}\n\n\n\nFoursomes\nExample 4: Use the alternate_shot function for Foursomes format. The input adj_ch = TRUE when 2024settings = ON.\n\nmixed |&gt;\n  add_format(format = \"Foursomes (50/50%)\") |&gt; \n  course_handicap(round = FALSE, crp = TRUE) |&gt;\n  playing_handicap() |&gt;\n  alternate_shot(adj_ch=TRUE) |&gt; \n  select(hi,par, ch, chah, th,  adj_m, thm, adj_s, ths) |&gt; \n  gt() |&gt; \n  sub_missing(missing_text = \"\")\n\n\n\n\n\n  \n    \n      hi\n      par\n      ch\n      chah\n      th\n      adj_m\n      thm\n      adj_s\n      ths\n    \n  \n  \n    9.3\n70\n11.387611\n9.387611\n16.8646018\n0\n\n0\n\n    25.8\n69\n27.341593\n24.341593\n16.8646018\n0\n17\n0\n17\n    -1.2\n72\n-1.369912\n-1.369912\n0.6278761\n0\n\n0\n\n    2.3\n72\n2.625664\n2.625664\n0.6278761\n0\n1\n0\n1\n  \n  \n  \n\n\n\n\nExample 5: Use the alternate_shot function for Foursomes matchplay format.\n\nmixed |&gt;\n  add_format(format = \"Foursomes (50/50%) matchplay\") |&gt;\n  course_handicap(round = FALSE, crp = TRUE) |&gt;\n  playing_handicap() |&gt;\n  alternate_shot(adj_ch=TRUE) |&gt; \n  select(hi,par, ch, chah, th, thm, s, sumch1, sumch, dsumch, s1) |&gt; \n  gt() |&gt; \n  sub_missing(missing_text = \"\")\n\n\n\n\n\n  \n    \n      hi\n      par\n      ch\n      chah\n      th\n      thm\n      s\n      sumch1\n      sumch\n      dsumch\n      s1\n    \n  \n  \n    9.3\n70\n11.387611\n9.387611\n16.8646018\n\n\n33.729204\n34\n33\n\n    25.8\n69\n27.341593\n24.341593\n16.8646018\n17\n16\n33.729204\n34\n33\n17\n    -1.2\n72\n-1.369912\n-1.369912\n0.6278761\n\n\n1.255752\n1\n0\n\n    2.3\n72\n2.625664\n2.625664\n0.6278761\n1\n0\n1.255752\n1\n0\n0\n  \n  \n  \n\n\n\n\n\n Note: when the 2024setting = ON, use new variables sumch, dsumch, s1 for the foursomes matchplay instead of the current variables th, thm, s.\nMay be easiest to create a new replica format of the current Foursomes matchplay to use these new variables and only show the results when user selects the format AND have 2024setting = ON? This is the same approach suggested for the 4BBB matchplay (90% vs 90% difference) above using one option on the dropdown formats but different results based on the button 2024setting.\n\n\n\nGreensomes\nExample 6: Use the alternate_shot function for Greensomes format with the adjusted CH when 2024settings = ON. With this setting, all other adjustments are 0.\n\nmixed |&gt;\n  add_format(format = \"Greensomes (60/40%)\") |&gt; \n  course_handicap(round = FALSE, crp = TRUE) |&gt;\n  playing_handicap() |&gt;\n  alternate_shot(adj_ch=TRUE) |&gt; \n  select(hi,par, ch, chah, th, adj_m, thm, adj_s, ths) |&gt; \n  gt() |&gt; \n  sub_missing(missing_text = \"\")\n\n\n\n\n\n  \n    \n      hi\n      par\n      ch\n      chah\n      th\n      adj_m\n      thm\n      adj_s\n      ths\n    \n  \n  \n    9.3\n70\n11.387611\n9.387611\n15.3692035\n0\n\n0\n\n    25.8\n69\n27.341593\n24.341593\n15.3692035\n0\n15\n0\n15\n    -1.2\n72\n-1.369912\n-1.369912\n0.2283186\n0\n\n0\n\n    2.3\n72\n2.625664\n2.625664\n0.2283186\n0\n0\n0\n0\n  \n  \n  \n\n\n\n\nExample 7: Use the alternate_shot function for Greensomes matchplay format.\n\nmixed |&gt;\n  add_format(format = \"Greensomes matchplay (60/40%)\") |&gt;\n  course_handicap(round = FALSE, crp = TRUE) |&gt;\n  playing_handicap() |&gt;\n  alternate_shot(adj_ch = TRUE) |&gt; \n  select(hi,par, ch, chah, th, thm, s, sumch1, sumch, dsumch, s1) |&gt; \n  gt() |&gt; \n  sub_missing(missing_text = \"\")\n\n\n\n\n\n  \n    \n      hi\n      par\n      ch\n      chah\n      th\n      thm\n      s\n      sumch1\n      sumch\n      dsumch\n      s1\n    \n  \n  \n    9.3\n70\n11.387611\n9.387611\n15.3692035\n\n\n\n\n\n\n    25.8\n69\n27.341593\n24.341593\n15.3692035\n15\n15\n\n\n\n\n    -1.2\n72\n-1.369912\n-1.369912\n0.2283186\n\n\n\n\n\n\n    2.3\n72\n2.625664\n2.625664\n0.2283186\n0\n0\n\n\n\n\n  \n  \n  \n\n\n\n\n\n Note: the Greensomes matchplay format uses the thm for calculating s, the same as the current calculations."
  }
]